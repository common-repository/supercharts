(function() {
    var $, addExtendMixins, fullHeightMixin, helpers;
    null == window.supercharts && (window.supercharts = {}), $ = jQuery, helpers = window.supercharts.helpers, 
    addExtendMixins = function(viewClass) {
        var original;
        return original = viewClass.extend, viewClass.extend = function() {
            var klass, mixins;
            return klass = original.apply(this, arguments), mixins = klass.prototype.mixins, 
            null != mixins && _.has(klass.prototype, "mixins") && Cocktail.mixin(klass, mixins), 
            klass;
        };
    }, _([ Marionette.View, Marionette.ItemView, Marionette.CollectionView, Marionette.CompositeView, Marionette.Layout ]).each(function(o) {
        return addExtendMixins(o);
    }), fullHeightMixin = {
        onRender: function() {
            return $(window).resize(_.bind(this.resize, this)), this.resize();
        },
        resize: function() {
            var h;
            return h = $(".wizard-main").height() - 70, this.$el.css("height", h);
        }
    }, Backbone.sync = function(method, model, options) {
        var params;
        return params = _.extend({
            type: "POST",
            dataType: "json",
            url: helpers.savingUrl(),
            contentType: "application/x-www-form-urlencoded;charset=UTF-8"
        }, options), "read" === method && (params.type = "GET", params.data = model.id), 
        params.data || !model || "create" !== method && "update" !== method && "delete" !== method || (params.data = JSON.stringify(model.toJSON())), 
        "GET" !== params.type && (params.processData = !1), params.data = $.param({
            backbone_method: method,
            backbone_model: model.dbModel,
            content: params.data
        }), $.ajax(params);
    }, window.supercharts.init = function(editor) {
        var ChartView, DataLayout, DataView, FormatSelectorView, FormatView, NameView, OptionsLayout, OptionsView, Superchart, app, superchart, validateStepChange;
        return app = new Backbone.Marionette.Application(), Superchart = Backbone.Model.extend({
            defaults: {
                title: "",
                options: window.supercharts.optionPresets
            }
        }), superchart = new Superchart(), NameView = Marionette.ItemView.extend({
            mixins: [ fullHeightMixin ],
            attributes: {
                "class": "wizard-column wizard-row"
            },
            template: _.template('<div id="name-input" class="col-sm-4 col-sm-offset-4"><div class="col-md-12 input-group"><input type="text" name="title" value="<%= title %>" placeholder="Chart title" class="input-lg form-control"><span class="input-group-btn"><button class="btn btn-group btn-primary submit-name btn-lg">GO</button></span></div></div>'),
            events: {
                "click button": "submit"
            },
            onRender: function() {
                return app.vent.once("showStep", _.bind(this.submit, this));
            },
            submit: function() {
                var title;
                return title = this.$('input[name="title"]').val(), this.model.set("title", title), 
                app.vent.trigger("showStep", {
                    step: "type"
                });
            }
        }), FormatView = Marionette.ItemView.extend({
            initialize: function() {
                return this.arrowClass = this.model.get("active") ? "good" : "inactive";
            },
            tagName: "li",
            getTemplate: function() {
                return _.template('<div class="col-xs-2 text-center lrg-thumb"><a href="#"><div class="thumbnail ' + this.arrowClass + '"><div class="arrow ' + this.arrowClass + '"></div><img src="' + helpers.urls.plugin + '/assets/formats/<%= name %>.png"><div class="overlay"></div><h4><%= name %></h4></div></a></div>');
            },
            events: {
                click: "clicked"
            },
            clicked: function() {
                return this.trigger(this.model.get("active") ? "clicked" : "redirect");
            }
        }), FormatSelectorView = Marionette.CollectionView.extend({
            mixins: [ fullHeightMixin ],
            attributes: {
                "class": "wizard-workspace"
            },
            initialize: function() {
                return this.collection = new Backbone.Collection(window.supercharts.formats);
            },
            itemEvents: {
                clicked: "makeSelection",
                redirect: "redirect"
            },
            redirect: function() {
                return window.open(helpers.urls.premium, "_blank");
            },
            itemView: FormatView,
            makeSelection: function(e, view) {
                var exampleData;
                return exampleData = view.model.get("exampleData"), this.model.set({
                    formatId: view.model.get("id"),
                    dataSource: exampleData
                }), app.vent.trigger("showStep", {
                    step: "data"
                });
            }
        }), DataLayout = Marionette.Layout.extend({
            mixins: [ fullHeightMixin ],
            attributes: {
                "class": "col-sm-12 padding-top"
            },
            template: _.template('<div class="wizard-left col-sm-6 border-bottom no-padding"></div><div class="wizard-right col-sm-6"></div><div class="clearfix"></div>'),
            regions: {
                left: ".wizard-left",
                right: ".wizard-right"
            },
            onRender: function() {
                return this.left.show(new DataView({
                    model: superchart
                })), this.right.show(new ChartView({
                    model: superchart
                }));
            }
        }), DataView = Marionette.ItemView.extend({
            mixins: [ fullHeightMixin ],
            template: _.template('<div class="sheet-container max-height"></div><div class="clearfix"></div>'),
            onRender: function() {
                var format;
                return format = helpers.getFormat(this.model.get("formatId")), setTimeout(function(_this) {
                    return function() {
                        var data, numCols;
                        return data = _this.model.get("dataSource"), numCols = _.size(_.compact(data[0])) + format.minSpareCols, 
                        _this.$(".sheet-container").handsontable({
                            data: data,
                            minSpareRows: 1,
                            contextMenu: !0,
                            colHeaders: format.colHeaders,
                            rowHeaders: function(row) {
                                return 0 === row ? "Key" : row - 1;
                            },
                            minRows: 30,
                            minSpareCols: format.minSpareCols,
                            colWidths: function() {
                                return (_this.$el.parent().width() - 60) / numCols;
                            },
                            width: function() {
                                return _this.$el.parent().width();
                            },
                            height: function() {
                                return _this.$el.parent().height();
                            },
                            manualColumnResize: !0,
                            onChange: function(changes, source) {
                                return "loadData" !== source ? (_this.model.set({
                                    dataSource: _this.$(".sheet-container").handsontable("getData")
                                }), _this.model.trigger("change")) : void 0;
                            }
                        });
                    };
                }(this), 500);
            }
        }), ChartView = Marionette.ItemView.extend({
            mixins: [ fullHeightMixin ],
            attributes: {
                "class": "col-sm-12 max-height min-height"
            },
            template: _.template('<div class="chart-container-wrap col-sm-12"><div class="chart-container"></div></div>'),
            onRender: function() {
                return setTimeout(function(_this) {
                    return function() {
                        var h, options;
                        switch (h = _this.$el.parent().height(), _this.$(".chart-container-wrap").css("height", h), 
                        options = helpers.getOptions(_this.model), _this.model.get("formatId")) {
                          case 1:
                          case 3:
                          case 4:
                          case 5:
                          case 6:
                          case 7:
                            _this.$(".chart-container").dxChart(options), _this.chart = _this.$(".chart-container").dxChart("instance");
                            break;

                          case 2:
                            _this.$(".chart-container").dxPieChart(options), _this.chart = _this.$(".chart-container").dxPieChart("instance");
                        }
                        return _this.listenTo(_this.model, "change", _this.reRender), _this.setBGColor();
                    };
                }(this));
            },
            setBGColor: function() {
                var bgColorToUse, bgColors, lightLabels;
                return lightLabels = this.model.get("options").lightLabels, bgColors = helpers.userSettings.colors.labels, 
                bgColorToUse = bgColors.light, null == lightLabels || lightLabels !== !0 && "true" !== lightLabels || (bgColorToUse = bgColors.dark), 
                this.$(".chart-container-wrap").css("background", bgColorToUse);
            },
            reRender: function() {
                return this.chart.beginUpdate(), this.chart.option(helpers.getOptions(this.model)), 
                this.chart.endUpdate(), this.setBGColor();
            }
        }), OptionsLayout = Marionette.Layout.extend({
            mixins: [ fullHeightMixin ],
            attributes: {
                "class": "col-sm-12 padding-top"
            },
            template: _.template('<div class="wizard-left col-sm-6 no-padding"></div><div class="wizard-right col-sm-6"></div><div class="clearfix"></div>'),
            regions: {
                left: ".wizard-left",
                right: ".wizard-right"
            },
            onRender: function() {
                return this.left.show(new OptionsView({
                    model: superchart
                })), this.right.show(new ChartView({
                    model: superchart
                }));
            }
        }), OptionsView = Marionette.ItemView.extend({
            mixins: [ fullHeightMixin ],
            attributes: {
                "class": "wizard-options"
            },
            initialize: function() {
                return this.options = window.supercharts.basicOptions, this.palettes = helpers.getPalettes(), 
                this.fontCombinations = helpers.getFontCombinations();
            },
            tagName: "form",
            template: _.template(""),
            events: {
                "change input": "updateOptions",
                "change select": "updateOptions"
            },
            onRender: function() {
                return helpers.renderOptionsForm(this.options, this.fontCombinations, this.palettes, this.$el, _.bind(this.updateOptions, this));
            },
            updateOptions: function() {
                var formVals, interpreted;
                return formVals = this.$("form").serializeArray(), interpreted = helpers.interpretBasicOptions(formVals), 
                this.model.set("options", interpreted);
            }
        }), app.addRegions({
            main: ".wizard-main",
            notification: ".wizard-notification"
        }), app.addInitializer(function() {
            return Backbone.history.start(), this.main.ensureEl(), this.vent.trigger("showStep", {
                step: "name"
            });
        }), validateStepChange = function(data) {
            var STEPS, step, val;
            return STEPS = {
                name: {
                    id: 5
                },
                type: {
                    previous: "name",
                    id: 4
                },
                data: {
                    required: "formatId",
                    previous: "type",
                    msg: "Please choose a type of chart.",
                    id: 3
                },
                opts: {
                    required: "formatId",
                    previous: "type",
                    msg: "Please choose a type of chart.",
                    id: 2
                },
                insert: {
                    required: "formatId",
                    previous: "type",
                    msg: "Please choose a type of chart.",
                    id: 1
                }
            }, step = STEPS[data.step], null != step ? (val = superchart.get(step.required), 
            null != step.required && null == val ? (data.step = step.previous, app.vent.trigger("notify", step.msg), 
            app.vent.trigger("showStep", data)) : app.vent.trigger("updateNav", step.id)) : void 0;
        }, app.vent.on("showStep", function(data) {
            switch (validateStepChange(data), data.step) {
              case "name":
                app.main.show(new NameView({
                    model: superchart
                }));
                break;

              case "type":
                app.main.show(new FormatSelectorView({
                    model: superchart
                }));
                break;

              case "data":
                app.main.show(new DataLayout());
                break;

              case "opts":
                app.main.show(new OptionsLayout());
            }
            return "insert" === data.step ? app.vent.trigger("insert") : void 0;
        }), app.vent.on("updateNav", function(id) {
            return $(".wizard-nav a.active").removeClass("active"), $(".wizard-nav a:eq(" + id + ")").addClass("active");
        }), app.vent.on("notify", function(msg) {
            var region;
            return region = $(".wizard-notification").html(msg).show(), setTimeout(function() {
                return function() {
                    return region.fadeOut("slow");
                };
            }(this), 2e3);
        }), app.vent.on("insert", function() {
            var id;
            return id = superchart.save(superchart.attributes, {
                success: function(model, resp) {
                    return editor.insertContent('[superchart id="' + resp.id + '"]'), $(".ui-dialog").remove();
                },
                error: function(model, xhr) {
                    return console.log(xhr.responseJSON);
                }
            });
        }), window.supercharts.wizard = app, app;
    };
}).call(this);