(function() {
    var $, helpers;
    null == window.supercharts && (window.supercharts = {}), window.supercharts.helpers = helpers = {}, 
    $ = jQuery, helpers.urls = {
        base: wpSuperchartsData.base_url,
        plugin: wpSuperchartsData.plugin_url,
        premium: "http://wordpress.numberpicture.com"
    }, helpers.userSettings = {
        colors: {
            labels: {
                light: "#ffffff",
                dark: "#666666"
            }
        }
    }, helpers.dataAsObjects = function(data) {
        var columns;
        return columns = _.reduce(data[0], function(mem, d, i) {
            return null != d && mem.push(i), mem;
        }, []), columns.length > 0 ? _.reduce(data, function(memo, o) {
            return _.compact(o).length > 0 && memo.push(_.object(_.zip(columns, o))), memo;
        }, []) : null;
    }, helpers.dataKeys = function(arrays) {
        return arrays[0];
    }, helpers.dataWithoutKeys = function(data) {
        return _.without(data, data[0]);
    }, helpers.chartData = function(data) {
        var obj_data;
        return obj_data = helpers.dataAsObjects(data), helpers.dataWithoutKeys(obj_data);
    }, helpers.formatData = function(data, format) {
        var defaultParseFn, parseFns;
        return parseFns = format.colParseFns, defaultParseFn = format.defaultParseFn || parseFloat, 
        _.each(data, function(d, i) {
            return _.each(_.values(d), function(v, j) {
                return data[i][j] = null != parseFns[j] ? parseFns[j](v) : defaultParseFn(v);
            });
        }), data;
    }, helpers.interpretBasicOptions = function(formVals) {
        var opts;
        return opts = {
            legend: {},
            commonAxisSettings: {
                grid: {},
                label: {
                    font: {}
                }
            },
            argumnentAxis: {
                grid: {}
            },
            commonSeriesSettings: {
                label: {
                    font: {}
                }
            },
            tooltip: {
                font: {}
            },
            title: {
                font: {}
            }
        }, _.each(formVals, function(v) {
            var alignments;
            switch (v.name) {
              case "general-legendPosition":
                alignments = v.value.split("-"), opts.legend.horizontalAlignment = alignments[1], 
                opts.legend.verticalAlignment = alignments[0];
                break;

              case "general-legendVisible":
                opts.legend.visible = "true" === v.value || v.value === !0;
                break;

              case "general-gridVisible":
                opts.commonAxisSettings.grid.visible = "true" === v.value || v.value === !0, opts.argumnentAxis.grid.visible = "true" === v.value || v.value === !0;
                break;

              case "general-labelsVisible":
                opts.commonSeriesSettings.label.visible = "true" === v.value || v.value === !0;
                break;

              case "general-tooltipsVisible":
                opts.tooltip.enabled = "true" === v.value || v.value === !0;
                break;

              case "general-lightLabels":
                opts.lightLabels = "true" === v.value || v.value === !0;
                break;

              case "colors-palette":
                opts.paletteId = v.value;
                break;

              case "fonts-combination":
                opts.fontCombinationId = v.value;
            }
        }), opts;
    }, helpers.jqueryFontStyleToJSON = function(font) {
        return {
            family: font["font-family"],
            weight: font["font-weight"],
            style: font["font-style"]
        };
    }, helpers.getOptions = function(model) {
        var body, chartData, fontComb, format, labelColor, options, title, _base, _base1;
        return options = $.extend({}, window.supercharts.optionPresets, model.get("options")), 
        format = helpers.getFormat(model.get("formatId")), chartData = helpers.chartData(model.get("dataSource")), 
        options.dataSource = helpers.formatData(chartData, format), title = model.get("title"), 
        "" !== title && (null == options.title && (options.title = {}), options.title.text = title), 
        fontComb = helpers.getFontCombination(options.fontCombinationId), title = helpers.jqueryFontStyleToJSON(fontComb.title), 
        body = helpers.jqueryFontStyleToJSON(fontComb.body), null == (_base = options.commonSeriesSettings).label && (_base.label = {}), 
        null == (_base1 = options.commonAxisSettings).label && (_base1.label = {}), options.title.font = title, 
        options.commonSeriesSettings.label.font = body, options.commonSeriesSettings.label.font = {}, 
        options.commonAxisSettings.label.font = body, options.tooltip.font = body, options.legend.font = body, 
        delete options.fontCombinationId, labelColor = options.lightLabels ? helpers.userSettings.colors.labels.light : helpers.userSettings.colors.labels.dark, 
        options.title.font.color = labelColor, options.commonAxisSettings.label.font.color = labelColor, 
        options.commonSeriesSettings.label.font.color = helpers.userSettings.colors.labels.light, 
        options.legend.font.color = labelColor, delete options.lightLabels, options.palette = helpers.getPalette(model.get("options").paletteId).colors, 
        delete options.paletteId, options = format.setUpSeries(model, options, helpers);
    }, helpers.getFormat = function(id) {
        return _.findWhere(window.supercharts.formats, {
            id: parseInt(id)
        });
    }, helpers.getPalettes = function() {
        return window.supercharts.palettes;
    }, helpers.getPalette = function(id) {
        return _.findWhere(window.supercharts.palettes, {
            id: parseInt(id)
        });
    }, helpers.getFontCombinations = function() {
        return window.supercharts.fontCombinations;
    }, helpers.getFontCombination = function(id) {
        return _.findWhere(window.supercharts.fontCombinations, {
            id: parseInt(id)
        });
    }, helpers.savingUrl = function() {
        var uri;
        return uri = window.supercharts.baseURI, "" + helpers.urls.base + "/index.php?supercharts=1";
    }, helpers.renderOptionsForm = function(options, fontCombinations, palettes, el, updateFn) {
        var add, form;
        return add = function(tagName, options, appendTo) {
            return $("<" + tagName + " />", options).appendTo(appendTo);
        }, form = add("form", {
            "class": "form form-horizontal"
        }, el), _.each(_.pairs(options), function() {
            return function(pair) {
                var cat, catKey;
                return catKey = pair[0], cat = pair[1], add("h3", {
                    html: cat.label
                }, form), _.each(cat.options, function(opt) {
                    var button, input, select, span, w, wrap;
                    switch (w = form, opt.type) {
                      case "discreteRange":
                        return wrap = add("div", {
                            "class": "col-sm-6 input-group"
                        }, w), span = add("span", {
                            "class": "input-group-btn"
                        }, wrap), select = add("select", {
                            name: "" + catKey + "-" + opt.id,
                            "class": "form-control"
                        }, wrap), _.each(opt.options, function(subOpt) {
                            return add("option", {
                                value: subOpt.value,
                                html: subOpt.label
                            }, select);
                        }), add("label", {
                            html: opt.label,
                            "class": "btn btn-group btn-primary"
                        }, span);

                      case "boolean":
                        return input = add("input", {
                            type: "hidden",
                            name: "" + catKey + "-" + opt.id,
                            id: "" + catKey + "-" + opt.id,
                            value: opt["default"]
                        }, form), button = add("a", {
                            "class": "wizard-button",
                            html: opt.label
                        }, w), opt["default"] === !0 && button.addClass("active"), button.click(function() {
                            return input.val(button.hasClass("active") ? "false" : "true"), button.toggleClass("active"), 
                            updateFn();
                        });

                      case "redirect":
                        return button = add("a", {
                            "class": "wizard-button",
                            html: opt.label
                        }, w), opt["default"] === !0 && button.addClass("active"), button.hover(function() {
                            return $(this).addClass("active");
                        }, function() {
                            return $(this).removeClass("active");
                        }).click(function() {
                            return window.open(helpers.urls.premium, "_blank");
                        });

                      case "palette":
                        return input = add("input", {
                            type: "hidden",
                            name: "" + catKey + "-" + opt.id,
                            id: "" + catKey + "-" + opt.id,
                            value: opt["default"]
                        }, form), _.each(palettes, function(p) {
                            return button = $("<a />", {
                                "class": "wizard-button color-wizard-button"
                            }).appendTo(w).click(function() {
                                return $(".color-wizard-button").removeClass("active"), $(this).addClass("active"), 
                                input.val(p.id), updateFn();
                            }), _.each(p.colors, function(c) {
                                var block;
                                return block = add("div", {
                                    "class": "color-block"
                                }, button), block.css("background", c);
                            }), opt["default"] === p.id ? button.addClass("active") : void 0;
                        });

                      case "fontCombination":
                        return input = add("input", {
                            type: "hidden",
                            name: "" + catKey + "-" + opt.id,
                            id: "" + catKey + "-" + opt.id,
                            value: opt["default"]
                        }, form), _.each(fontCombinations, function(fc) {
                            return button = $("<a />", {
                                "class": "wizard-button font-wizard-button",
                                html: "<span class='title'>" + fc.title.name + "</span><span class='sep'>/</span><span class='body'>" + fc.body.name + "</span>"
                            }).appendTo(w).click(function() {
                                return $(".font-wizard-button").removeClass("active"), $(this).addClass("active"), 
                                input.val(fc.id), updateFn();
                            }), button.find(".title").css(fc.title), button.find(".body").css(fc.body), opt["default"] === fc.id ? button.addClass("active") : void 0;
                        });
                    }
                });
            };
        }(this));
    };
}).call(this);